@page "/"

<label for="uploadFiles">Select pdfs:</label>
<div class="drag-drop-zone">
    <InputFile id="uploadFiles" multiple OnChange="HandleSelection" accept="application/pdf" capture="false" />
    Drop pdf files here or click here to choose
</div>
    
@if (selectedFiles != null)
{
    <ul class="list-group mt-2">
    @foreach (var file in selectedFiles)
    {
        <li class="list-group-item">
            <div class="d-flex justify-content-between align-items-center">
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                
                <h3>@file.Name</h3>
                <span>Size: <strong>@file.Size bytes</strong></span>
            </div>
        </li>
    }
    </ul>
}
    

    
@if(files != null)
{
    if(files.Count != 0){
        <button class="btn btn-danger" disabled="@(loading)" @onclick="()=> Reset()">Remove all</button>
    }
    <ul class="list-group mt-2">
    @foreach(var file in files)
    {
        int index = files.IndexOf(file);
        <li class="list-group-item">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex">
                    @if (index != 0)
                    {
                        <button class="btn" disabled="@(loading)" @onclick="() => MoveUp(file)">
                            <svg class="bi bi-caret-up-fill" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path d="M7.247 4.86l-4.796 5.481c-.566.647-.106 1.659.753 1.659h9.592a1 1 0 00.753-1.659l-4.796-5.48a1 1 0 00-1.506 0z"/>
                            </svg>
                        </button>
                    }
                    else {
                        <div style="width: 42px; height: 40px; padding: 1px"></div>
                    }
                    @if (index != files.Count-1)
                    {
                        <button class="btn" disabled="@(loading)" @onclick="() => MoveDown(file)">
                            <svg class="bi bi-caret-down-fill" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path d="M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 01.753 1.659l-4.796 5.48a1 1 0 01-1.506 0z"/>
                            </svg>
                        </button>
                    }
                </div>
                    
                <h3>@file.Name</h3>
                <button disabled="@(loading)" @onclick="() => RemoveFile(file)" class="btn btn-danger">-</button>
            </div>
        </li>
    }
    </ul>
}
    

<button class="btn btn-primary mt-2" disabled="@(loading || files.Count == 0)" @onclick="@CreatePDFClicked">
    @if (loading) {
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
    }
    Merge PDFs
</button>


@code {
    List<FileInMemory> files = new List<FileInMemory>();
    List<IFileListEntry> selectedFiles;

    Boolean loading = false;

    async Task HandleSelection(IFileListEntry[] files)
    {
        selectedFiles = new List<IFileListEntry>();
        selectedFiles.AddRange(files);
        foreach (IFileListEntry ifile in files)
        {
            if (ifile.Type != "application/pdf")
            {
                selectedFiles.Remove(ifile);
                continue;
            }
            await Task.Yield();
            var ms = new MemoryStream();
            await ifile.Data.CopyToAsync(ms);
            FileInMemory file = new FileInMemory(ms, ifile.Size, ifile.Name);
            this.files.Add(file);
            selectedFiles.Remove(ifile);
        }
    }

    void RemoveFile(FileInMemory file)
    {
        files.Remove(file);
    }

    void Reset()
    {
        files = new List<FileInMemory>();
    }

    void MoveUp(FileInMemory file)
    {
        int index = files.IndexOf(file);
        files.Remove(file);
        files.Insert(index - 1, file);
    }

    void MoveDown(FileInMemory file)
    {
        int index = files.IndexOf(file);
        files.Remove(file);
        files.Insert(index + 1, file);
    }
}

@functions {
 
    async Task CreatePDFClicked()
    {
        if (files.Count == 0) return;
        loading = true;

        await Task.Yield();

        await CreatePDF();

        loading = false;
    }

    async Task CreatePDF()
    {
        PdfDocument outPdf = new PdfDocument();

        foreach (FileInMemory file in files)
        {
            await Task.Yield();
            try
            {
                PdfDocument document = PdfReader.Open(file.Stream, PdfDocumentOpenMode.Import);
                await CopyPages(document, outPdf);
            }
            catch
            {
                await JS.InvokeAsync<object>("alert", "Corrupt pdf: " + file.Name);
                loading = false;
                return;
            }
        }
        await Task.Yield();

        MemoryStream stream = new MemoryStream();
        outPdf.Save(stream, true);

        await JS.SaveAs("Merged.pdf", stream.ToArray());
    }
    async Task CopyPages(PdfDocument from, PdfDocument to)
    {
        for (int i = 0; i < from.PageCount; i++)
        {
            await Task.Yield();
            to.AddPage(from.Pages[i]);
        }
    }
}
